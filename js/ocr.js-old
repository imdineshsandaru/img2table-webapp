/**
 * OCR Module - Handles text extraction from images using Tesseract.js
 */

/**
 * Performs OCR on an uploaded image file
 * @param {File} file - The image file to process
 * @returns {Promise<string>} - The extracted text
 */
export async function performOCR(file) {
  try {
    // Create a worker
    const worker = await Tesseract.createWorker('eng');
    
    // Set image processing parameters for table detection
    await worker.setParameters({
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 .',
      preserve_interword_spaces: '1'
    });
    
    // Read the image file
    const imageData = await readFileAsDataURL(file);
    
    // Recognize text in the image
    const { data } = await worker.recognize(imageData);
    
    // Terminate the worker
    await worker.terminate();
    
    if (!data || !data.text || data.text.trim() === '') {
      throw new Error('No text was detected in the image. Please try with a clearer image.');
    }
    
    return data.text;
  } catch (error) {
    console.error('OCR Error:', error);
    throw new Error('Error performing OCR: ' + (error.message || 'Unknown error'));
  }
}

/**
 * Reads a file as a data URL
 * @param {File} file - The file to read
 * @returns {Promise<string>} - The file as a data URL
 */
function readFileAsDataURL(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = () => resolve(reader.result);
    reader.onerror = () => reject(new Error('Error reading file'));
    
    reader.readAsDataURL(file);
  });
}